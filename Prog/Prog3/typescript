Script started on Tue 09 Apr 2019 12:56:42 PM EDT
]0;sims_gl@cobra:~/CSC245/Prog3[?1034h[sims_gl@cobra Prog3]$ cat -n zip.cpp
     1	#include <iostream>
     2	#include <fstream>
     3	#include <string>
     4	#include <map>
     5	#include <vector>
     6	#include <iomanip>
     7	#include <cstdlib>
     8	#include <algorithm>
     9	#include "huffman.h"
    10	#include <stdlib.h>
    11	using namespace std;
    12	
    13	int main(int argc, char *argv[])
    14	{
    15		//variable declaration
    16		HuffmanTree T;
    17		char ch; 
    18		string filename; vector <char> numBread; //holds the characters
    19		string arg1 = argv[1];
    20		bool useTable = false;
    21	 	int counter = 0;
    22	   	int chars = 0;  
    23		int Letters[256];
    24	
    25		//checks to see if user gave a file or a special command
    26		if (argc == 1)
    27		{
    28			cout << "File not entered. Program terminated." << endl;
    29			exit(1);
    30		}
    31		if (arg1 == "--t")
    32	  	{
    33	   		filename = argv[2];
    34			useTable = true;
    35		}
    36	  	else{
    37	    		filename = argv[1];
    38	    		useTable = false;
    39	 	}
    40	  	if(arg1 == "--help"){
    41	         	string whatEver;
    42	         	ifstream helpFile;
    43	         	helpFile.open("help");
    44	           	while(getline(helpFile, whatEver)){
    45	             		cout << whatEver << endl;
    46	             	}
    47	           	helpFile.close();
    48			exit(1);
    49	  	}
    50		//userinput for a file within the directory is given
    51		ifstream infile;
    52		ofstream outfile;
    53	  
    54	
    55		//getting file input
    56		infile.open(filename.c_str());
    57	
    58		//zeros out all values and gets rid of values that are not
    59		//used
    60		for( int x = 0; x < 256; x++ ) 
    61			Letters[x] = 0; 
    62	
    63	
    64		for (char ch = char(0); ch <= char(128); ch++)
    65			Letters[ch] = 0;
    66	
    67	
    68		while (infile.get(ch))
    69		{
    70			numBread.push_back(ch);
    71			Letters[ch] += 1;
    72	    		counter++;
    73		}
    74	
    75		for (int i = 0; i <= 256; i++)
    76		{
    77			if (Letters[i] > 0){
    78				T.insert(i, Letters[i]);
    79	      			chars++;
    80			}
    81		}
    82	
    83		T.build();
    84	
    85		//a loop that determines if the boolean useTable is true
    86		//if true, the table will be printed
    87		if(useTable){
    88	    		T.PrintTable();		
    89	   	}
    90	
    91	   	infile.close();
    92	  
    93	  	//Data compression
    94	    		T.compression(filename, chars, counter);
    95	  	
    96	   
    97	   return 0;
    98	}
    99	
   100	
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ cat huffman.h
#include <vector>
#include <string>
using namespace std;

struct HNode {
    char ch;
    int weight;
    int parent;
    int childType;
};

class HuffmanTree {
    public:
	HuffmanTree();				// constructor

	void insert(char ch, int weight);	// inserts a character and its associated weight
						// into a node of the Huffman tree

	bool inTree(char ch);			// returns a boolean value indicating whether
						// a given character is stored in the tree
		
	int GetFrequency(char ch);		// returns the weight of a given character

	
	void build();				// Builds the Huffman Tree;
	

	string GetCode(char ch);		// returns the compressed code of a given
						// character in the tree using recursion

	void PrintTable();			// displays the Huffman encoding table used in
						// the compression process
	
	int numNodes();				// returns the number of nodes currently in Huffman 
						// tree
	
	vector<char> fetchBread();		//gets the chars from the file to help with zipping and unzipping

	
	void compression(string file, int chars, int counter); //a method that performs compression on the input file 
							       //and sends it to the outfile
		
    private:
	vector<HNode> nodes;
	int numChars;
	bool built;                             
	
	int lookUp(char ch);			// returns the index of a given character in tree
	int GetFrequency(int i);		// returns the weight at a given index
	string GetCode(int i);			// returns the compressed code of the character at 
						// a given index
	//void findSmall(int& min1, int& min2);
};
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ cat huffman.cpp
#include "huffman.h"
#include <string>
#include <stdio.h>
#include <algorithm>
#include <iomanip>
#include <iostream>
#include <fstream>
using namespace std;

HuffmanTree:: HuffmanTree()
	: numChars(0), built(false) {}

void HuffmanTree:: insert(char ch, int weight) {
    HNode newNode = {ch, weight, -1, -1}; 
    built = false;
    nodes.push_back(newNode);
    numChars++;
    
    int i, j;
    char temp;
    for(i = 0; i < numChars; i++)
    {
      for(j = 0; j < numChars - i - 1; j++)
      {
          if(nodes[j].ch > nodes[j+1].ch){
              temp = nodes[j].ch;
              nodes[j].ch = nodes[j+1].ch;
              nodes[j+1].ch = temp;
          }
      }
    }
}

bool HuffmanTree:: inTree(char ch) {
	for (int i = 0; i < nodes.size(); i++)
	{
		if (nodes[i].ch == ch)
			return true;
		else
			return false;
	}

}

int HuffmanTree:: GetFrequency(char ch) {
	if(!inTree(ch))
		return 0;
	else
		return nodes[lookUp(ch)].weight;
}

int HuffmanTree:: GetFrequency(int i) {
	int counter = 0;
	for (int j = 0; j < nodes.size(); j++)
	{
		if (nodes[j].ch == i)
			counter++;
	}
	return counter;
}

int HuffmanTree:: lookUp(char ch) {
	for (int i = 0; i < nodes.size(); i++)
	{
		if (nodes[i].ch == ch) {
			return i;
		}
	}
 	return -1;
}

string HuffmanTree:: GetCode(char ch) {
	return GetCode(lookUp(ch)); 
}

string HuffmanTree:: GetCode(int i) {
	//Private function called w/ location of letter
	if (nodes[i].parent == 0)
		return ""; //base case
	else
		return (GetCode(nodes[i].parent) + (char)(nodes[i].childType + '0'));
}
//a method that gets chars and not bread (sadly)
vector<char> HuffmanTree:: fetchBread(){
	vector<char> bread;
	for(int i =0; i < nodes.size(); i++)
		bread.push_back(nodes[i].ch);
		
	sort(bread.begin(), bread.end());
	
	return bread;
}

void HuffmanTree:: PrintTable() {
	//A method that displays the number of values within the vector, what values are present, how many there are,
	//who the values are tied to, and determines if the char is to the right or left in the tree
	int tcount = 1;
	cout << '\t' <<  "++++ ENCODING TABLE ++++" << endl;
	cout << endl;
	cout << "Index" << '\t' << "Char" << '\t' << "Weight" << '\t' << "Parent" << '\t' << "ChildType";
	cout << endl;
	for (int i = 0; i < nodes.size(); i++)
	{	
		if((nodes[i].ch != '\n') && (nodes[i].ch != ' ') && (nodes[i].ch != '\0')){
			cout << i << '\t' << nodes[i].ch << '\t' << nodes[i].weight << '\t' << nodes[i].parent << '\t';
			if(nodes[i].childType == -1){
				cout << "N/A" << endl;
			}
			else{	
				cout << nodes[i].childType << endl;
			}
		}
		if(nodes[i].ch == '\n'){
			cout << i << '\t' << "nl" << '\t' << nodes[i].weight << '\t' << nodes[i].parent << '\t';
			if(nodes[i].childType == -1){
				cout << "N/A" << endl;
			}
			else{
				cout << nodes[i].childType << endl;
			}
		}
		if(nodes[i].ch == ' '){
			cout << i << '\t' << "sp" << '\t' << nodes[i].weight << '\t' << nodes[i].parent << '\t';
			if(nodes[i].childType == -1){
				cout << "N/A" << endl;
			}
			else{
				cout << nodes[i].childType << endl;
			}
		}
		if(nodes[i].ch == '\0'){
			cout << i << '\t' << "T" << tcount << '\t' << nodes[i].weight << '\t' << nodes[i].parent << '\t';
			if(nodes[i].childType == -1){
				cout << "N/A " << endl;
			}
			else{
				cout << nodes[i].childType << endl;
			}
			tcount++;
		}
	}
}

int HuffmanTree:: numNodes() {
	//returns the value of nodes in the tree
	return nodes.size();
}
//determines the parent and childType for each char in the tree
void HuffmanTree:: build() {
	for(int i = 0; i <  numChars - 1; i++){

		int minDex,minIndex2;
		int min1 = 9999; int min2 = 9999;
		
		for(int j = 0; j < nodes.size(); j++)
		{
			if((nodes[j].parent == -1) && (nodes[j].weight < min1)){
				min1 = nodes[j].weight;
				minDex = j;
			}
		}
		for(int l = 0; l < nodes.size(); l++)
		{
			if((nodes[l].parent == -1) && (nodes[l].weight < min2) && (l != minDex)){
				min2 = nodes[l].weight;
				minIndex2 = l;
			}
		}
		
		nodes[minDex].parent = nodes.size();
		nodes[minIndex2].parent = nodes.size();

		nodes[minDex].childType = 0;
		nodes[minIndex2].childType = 1;

		HNode temp = {'\0', (min1 + min2), -1, -1};
		nodes.push_back(temp);
	}
		nodes[nodes.size() - 1].parent = 0;
		built = true; 
}

//a method that compresses the information from the input file and sends it
//into an outfile once it is zipped
void HuffmanTree:: compression(string file, int chars, int counter){
  	int bitNums = 0; char ch;
  	ifstream infile(file.c_str()); ofstream outfile;
  	double compressionRatio;
  	string binaryString;
  
  	string zipFile = file + ".zip";
  	outfile.open(zipFile.c_str());
  	outfile << chars << endl;
  	for(int i = 0; i < chars; i++)
  	{
     		outfile << (int)nodes[i].ch << " " << GetCode(nodes[i].ch) << endl;
  	}     
	while(infile.get(ch)){

  	string binaryLength = GetCode(ch);
  	bitNums += binaryLength.length();
  	binaryString += binaryLength;
   
	}
      	outfile << binaryString;
      
  	outfile.close();
	remove(file.c_str());
  	compressionRatio = (1.0 - ((double)bitNums / ((double)counter * 8))) * 100;
  	cout <<"File Successfully Compressed to " << bitNums << " Bits (" << setprecision(4) << compressionRatio << "% Less)." << endl;
}
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ c++ zip.cpp huffman.o
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ mv a.out myZip
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ c++ unzip.cpp
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ mv a.out un[K[KmyZ[KUNzi[K[K[Knzip
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ cat test[K[K[K[K[K sample1
 aaaaaaaaaa   eeeeeeeeeeeeeee   iiiiiiiiiiii   sss   tttt
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ cast[K[Kt testfile
MERCER BEAR DAY]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ myZIp[K[Kip sample1
File Successfully Compressed to 146 Bits (68.53% Less).
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ ls
help         huffman.o        [0m[01;32mmyUnzip[0m  [01;31msample1.zip[0m  sample3      testfile    unzip.cpp       zip.cpp
huffman.cpp  HUFFMANREAD.txt  [01;32mmyZip[0m    sample2      [01;31msample3.zip[0m  typescript  unzip.cpp.save  zip.cpp.save
huffman.h    letters.cpp      README   [01;31msample2.zip[0m  sample4      [01;32mUNZIP[0m       [01;32mZIP[0m
[m]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ cat sample1.zip
7
10 11010
32 01
97 111
101 10
105 00
115 11011
116 1100
01111111111111111111111111111111010101101010101010101010101010101010010101000000000000000000000000010101110111101111011010101110011001100110011010]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ mu[KyUNzip[K[K[K[Knzup[K[Kip sample1.zip
File Successfully Inflated Back to Original.
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ ls
help         huffman.o        [0m[01;32mmyUnzip[0m  sample1      sample3      testfile    unzip.cpp       zip.cpp
huffman.cpp  HUFFMANREAD.txt  [01;32mmyZip[0m    sample2      [01;31msample3.zip[0m  typescript  unzip.cpp.save  zip.cpp.save
huffman.h    letters.cpp      README   [01;31msample2.zip[0m  sample4      [01;32mUNZIP[0m       [01;32mZIP[0m
[m]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ cat sample1
 aaaaaaaaaa   eeeeeeeeeeeeeee   iiiiiiiiiiii   sss   tttt]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ myZIp [K[K[Kip testfile
File Successfully Compressed to 46 Bits (61.67% Less).
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ cat testfile.zip
9
32 011
65 100
66 1010
67 1011
68 1100
69 111
77 1101
82 00
89 010
1101111001011111000111010111100000111100100010]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ unZIp[K[K[K[K[KmyUnzip testfile.zip
File Successfully Inflated Back to Original.
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ myZIp [K[K[Kip --t sm[Kample1
	++++ ENCODING TABLE ++++

Index	Char	Weight	Parent	ChildType
0	sp	13	8	1
1	a	10	7	1
2	e	15	9	0
3	i	12	8	0
4	s	3	6	0
5	t	4	6	1
6	T1	7	7	0
7	T2	17	9	1
8	T3	25	10	0
9	T4	32	10	1
10	T5	57	0	N/A 
File Successfully Compressed to 138 Bits (69.74% Less).
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ myUNzip[K[K[K[Knzip sample1.zip
File Successfully Inflated Back to Original.
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ myZip --help
Usage: ZIP [OPTION]... [FILE]...
Compress a text file using Huffman encoding.

  --t              Display the Huffman encoding table. 
  --help           Provide help on command. 
]0;sims_gl@cobra:~/CSC245/Prog3[sims_gl@cobra Prog3]$ exit
exit

Script done on Tue 09 Apr 2019 01:00:17 PM EDT
